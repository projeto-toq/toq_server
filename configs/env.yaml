http:
  port: ":8080"
  read_timeout: "30s"
  write_timeout: "30s"
  max_header_bytes: 1048576

grpc:
  port: ":50051"
  network: "tcp"
  cert_path: "../../ssl-certs/fullchain.pem"
  key_path: "../../ssl-certs/privkey.pem"
  # client_ca_path: ""           # optional: path to CA for mTLS
  # require_client_cert: false    # optional: enable mTLS

db:
  uri: "toq_user:toq_password@tcp(localhost:3306)/toq_db?parseTime=true&loc=UTC&timeout=30s&readTimeout=30s&writeTimeout=30s"

database:
  populate: false # true to force database population/repopulation

redis:
  url: "redis://localhost:6379/0" # Redis URL for cache

log:
  level: "info" #info|warn|error|debug
  addsource: false #true inclui nome do function, file, line do fonte
  tofile: false #true envia para arquivo, false envia para o stdout
  path: "logs" # null to current directory or logdir/subdir   DEVE ESTAR COMO logs mon PARA FUNCIONAR NO DOCKER COMPOSE
  filename: "toq_server.log"


health:
  http_port: 8080   # Integrated into main HTTP server
  use_tls: false    # TLS terminated at nginx
  # cert_path: ""    # optional: defaults to grpc.cert_path when empty
  # key_path: ""     # optional: defaults to grpc.key_path when empty

jwt:
  secret: "Senh@123"

auth:
  refresh_ttl_days: 30 # Refresh token lifetime in days (absolute session lifetime)
  access_ttl_minutes: 15 # Access token lifetime in minutes
  max_session_rotations: 10 # Maximum allowed refresh rotations before forcing re-login
  session_cleaner_interval_seconds: 300 # Interval for background session cleanup

sms:
  account_sid: "ACc8806b43030a5de367d142e99bcf0fa7"
  auth_token: "e7629485d906af540bb6768a7daeca42"
  my_number: "+15405155642"

email:
  smtp_server: "smtp.gmail.com"
  smtp_port: 587
  smtp_user: "toq@toq.app.br"
  smtp_password: "jame nftq jrsq scfk"
  use_tls: true
  use_ssl: false
  skip_verify: false
  from_email: "noreply@toq.app.br"
  from_name: "TOQ App"
  max_retries: 3
  timeout_seconds: 30

fcm:
  credentials_file: "configs/fcm_admin.json"
  project_id: "your-firebase-project-id"

external_apis:
  hub_desenvolvedor:
    token: "164634160QpAPJYxHbS297241984"
    base_url: "http://ws.hubdodesenvolvedor.com.br/v2"

cep:
  token: "164634160QpAPJYxHbS297241984"
  url_base: "https://ws.hubdodesenvolvedor.com.br/v2" # Base URL para API de CEP

cnpj:
  token: "164634160QpAPJYxHbS297241984"
  url_base: "https://ws.hubdodesenvolvedor.com.br/v2" # Base URL para API de CNPJ

cpf:
  token: "164634160QpAPJYxHbS297241984"
  url_base: "https://ws.hubdodesenvolvedor.com.br/v2" # Base URL para API de CPF

gcs:
  project_id: "generated-arena-468217-v3"
  admin_sa_email: "gcs-admin@generated-arena-468217-v3.iam.gserviceaccount.com"
  writer_sa_email: "gcs-writer@generated-arena-468217-v3.iam.gserviceaccount.com"
  reader_sa_email: "gcs-reader@generated-arena-468217-v3.iam.gserviceaccount.com"
  admin_creds_path: "configs/gcs_admin.json"
  writer_creds_path: "configs/gcs_writer.json"
  reader_creds_path: "configs/gcs_reader.json"

# Configuração AWS S3 (substituindo GCS)
s3:
  region: "us-east-1"  # Region onde o bucket será criado
  bucket_name: "toq-app-media"  # Nome do bucket principal
  admin:
    access_key_id: "AKIAQ3EGR6UWRNMD4PMF"  # Substitua pela access key do usuário admin
    secret_access_key: "Y2KwzGEwFJ17KYUVau9fznihU2p3cCmyS7HjRxfg"  # Substitua pela secret key do usuário admin
  reader:
    access_key_id: "AKIAQ3EGR6UWRKMWASRG"  # Substitua pela access key do usuário reader
    secret_access_key: "eJ3TQ/ZtDWuxmBP5Q3MSogJJRrjjw5Fc8Rt5HgLW"  # Substitua pela secret key do usuário reader
