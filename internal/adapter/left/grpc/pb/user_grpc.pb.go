// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_CreateOwner_FullMethodName            = "/grpc.UserService/CreateOwner"
	UserService_CreateRealtor_FullMethodName          = "/grpc.UserService/CreateRealtor"
	UserService_CreateAgency_FullMethodName           = "/grpc.UserService/CreateAgency"
	UserService_SignIn_FullMethodName                 = "/grpc.UserService/SignIn"
	UserService_RefreshToken_FullMethodName           = "/grpc.UserService/RefreshToken"
	UserService_RequestPasswordChange_FullMethodName  = "/grpc.UserService/RequestPasswordChange"
	UserService_ConfirmPasswordChange_FullMethodName  = "/grpc.UserService/ConfirmPasswordChange"
	UserService_SignOut_FullMethodName                = "/grpc.UserService/SignOut"
	UserService_RequestEmailChange_FullMethodName     = "/grpc.UserService/RequestEmailChange"
	UserService_ConfirmEmailChange_FullMethodName     = "/grpc.UserService/ConfirmEmailChange"
	UserService_RequestPhoneChange_FullMethodName     = "/grpc.UserService/RequestPhoneChange"
	UserService_ConfirmPhoneChange_FullMethodName     = "/grpc.UserService/ConfirmPhoneChange"
	UserService_VerifyCreciImages_FullMethodName      = "/grpc.UserService/VerifyCreciImages"
	UserService_GetProfile_FullMethodName             = "/grpc.UserService/GetProfile"
	UserService_UpdateProfile_FullMethodName          = "/grpc.UserService/UpdateProfile"
	UserService_DeleteAccount_FullMethodName          = "/grpc.UserService/DeleteAccount"
	UserService_GetOnboardingStatus_FullMethodName    = "/grpc.UserService/GetOnboardingStatus"
	UserService_AddAlternativeUserRole_FullMethodName = "/grpc.UserService/AddAlternativeUserRole"
	UserService_GetUserRoles_FullMethodName           = "/grpc.UserService/GetUserRoles"
	UserService_SwitchUserRole_FullMethodName         = "/grpc.UserService/SwitchUserRole"
	UserService_InviteRealtor_FullMethodName          = "/grpc.UserService/InviteRealtor"
	UserService_GetRealtorsByAgency_FullMethodName    = "/grpc.UserService/GetRealtorsByAgency"
	UserService_GetRealtorByID_FullMethodName         = "/grpc.UserService/GetRealtorByID"
	UserService_DeleteRealtorByID_FullMethodName      = "/grpc.UserService/DeleteRealtorByID"
	UserService_AcceptInvitation_FullMethodName       = "/grpc.UserService/AcceptInvitation"
	UserService_RejectInvitation_FullMethodName       = "/grpc.UserService/RejectInvitation"
	UserService_GetAgencyOfRealtor_FullMethodName     = "/grpc.UserService/GetAgencyOfRealtor"
	UserService_DeleteAgencyOfRealtor_FullMethodName  = "/grpc.UserService/DeleteAgencyOfRealtor"
	UserService_GoHome_FullMethodName                 = "/grpc.UserService/GoHome"
	UserService_UpdateOptStatus_FullMethodName        = "/grpc.UserService/UpdateOptStatus"
	UserService_GenerateGCSUploadURL_FullMethodName   = "/grpc.UserService/GenerateGCSUploadURL"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// call without Authorization header
	CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerResponse, error)
	CreateRealtor(ctx context.Context, in *CreateRealtorRequest, opts ...grpc.CallOption) (*CreateRealtorResponse, error)
	CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	RequestPasswordChange(ctx context.Context, in *RequestPasswordChangeRequest, opts ...grpc.CallOption) (*RequestPasswordChangeResponse, error)
	ConfirmPasswordChange(ctx context.Context, in *ConfirmPasswordChangeRequest, opts ...grpc.CallOption) (*ConfirmPasswordChangeResponse, error)
	// call with Authorization header for Owner, Realtor and Agency
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	RequestEmailChange(ctx context.Context, in *RequestEmailChangeRequest, opts ...grpc.CallOption) (*RequestEmailChangeResponse, error)
	ConfirmEmailChange(ctx context.Context, in *ConfirmEmailChangeRequest, opts ...grpc.CallOption) (*ConfirmEmailChangeResponse, error)
	RequestPhoneChange(ctx context.Context, in *RequestPhoneChangeRequest, opts ...grpc.CallOption) (*RequestPhoneChangeResponse, error)
	ConfirmPhoneChange(ctx context.Context, in *ConfirmPhoneChangeRequest, opts ...grpc.CallOption) (*ConfirmPhoneChangeResponse, error)
	VerifyCreciImages(ctx context.Context, in *VerifyCreciImagesRequest, opts ...grpc.CallOption) (*VerifyCreciImagesResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error)
	// call with Authorization header for Owner and Realtor only
	AddAlternativeUserRole(ctx context.Context, in *AddAlternativeUserRoleRequest, opts ...grpc.CallOption) (*AddAlternativeUserRoleResponse, error)
	GetUserRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	SwitchUserRole(ctx context.Context, in *SwitchUserRoleRequest, opts ...grpc.CallOption) (*SwitchUserRoleResponse, error)
	// call with Authorization header for Agency only
	InviteRealtor(ctx context.Context, in *InviteRealtorRequest, opts ...grpc.CallOption) (*InviteRealtorResponse, error)
	GetRealtorsByAgency(ctx context.Context, in *GetRealtorsByAgencyRequest, opts ...grpc.CallOption) (*GetRealtorsByAgencyResponse, error)
	GetRealtorByID(ctx context.Context, in *GetRealtorByIDRequest, opts ...grpc.CallOption) (*GetRealtorByIDResponse, error)
	DeleteRealtorByID(ctx context.Context, in *DeleteRealtorByIDRequest, opts ...grpc.CallOption) (*DeleteRealtorByIDResponse, error)
	// call with Authorization header for Realtor only
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	RejectInvitation(ctx context.Context, in *RejectInvitationRequest, opts ...grpc.CallOption) (*RejectInvitationResponse, error)
	GetAgencyOfRealtor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAgencyOfRealtorResponse, error)
	DeleteAgencyOfRealtor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteAgencyOfRealtorResponse, error)
	GoHome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoHomeResponse, error)
	UpdateOptStatus(ctx context.Context, in *UpdateOptStatusRequest, opts ...grpc.CallOption) (*UpdateOptStatusResponse, error)
	GenerateGCSUploadURL(ctx context.Context, in *GenerateGCSUploadURLRequest, opts ...grpc.CallOption) (*GenerateGCSUploadURLResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOwnerResponse)
	err := c.cc.Invoke(ctx, UserService_CreateOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateRealtor(ctx context.Context, in *CreateRealtorRequest, opts ...grpc.CallOption) (*CreateRealtorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRealtorResponse)
	err := c.cc.Invoke(ctx, UserService_CreateRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAgency(ctx context.Context, in *CreateAgencyRequest, opts ...grpc.CallOption) (*CreateAgencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgencyResponse)
	err := c.cc.Invoke(ctx, UserService_CreateAgency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, UserService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestPasswordChange(ctx context.Context, in *RequestPasswordChangeRequest, opts ...grpc.CallOption) (*RequestPasswordChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPasswordChangeResponse)
	err := c.cc.Invoke(ctx, UserService_RequestPasswordChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmPasswordChange(ctx context.Context, in *ConfirmPasswordChangeRequest, opts ...grpc.CallOption) (*ConfirmPasswordChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPasswordChangeResponse)
	err := c.cc.Invoke(ctx, UserService_ConfirmPasswordChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, UserService_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestEmailChange(ctx context.Context, in *RequestEmailChangeRequest, opts ...grpc.CallOption) (*RequestEmailChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestEmailChangeResponse)
	err := c.cc.Invoke(ctx, UserService_RequestEmailChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmEmailChange(ctx context.Context, in *ConfirmEmailChangeRequest, opts ...grpc.CallOption) (*ConfirmEmailChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmEmailChangeResponse)
	err := c.cc.Invoke(ctx, UserService_ConfirmEmailChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestPhoneChange(ctx context.Context, in *RequestPhoneChangeRequest, opts ...grpc.CallOption) (*RequestPhoneChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPhoneChangeResponse)
	err := c.cc.Invoke(ctx, UserService_RequestPhoneChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmPhoneChange(ctx context.Context, in *ConfirmPhoneChangeRequest, opts ...grpc.CallOption) (*ConfirmPhoneChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPhoneChangeResponse)
	err := c.cc.Invoke(ctx, UserService_ConfirmPhoneChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyCreciImages(ctx context.Context, in *VerifyCreciImagesRequest, opts ...grpc.CallOption) (*VerifyCreciImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyCreciImagesResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyCreciImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOnboardingStatus(ctx context.Context, in *GetOnboardingStatusRequest, opts ...grpc.CallOption) (*GetOnboardingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnboardingStatusResponse)
	err := c.cc.Invoke(ctx, UserService_GetOnboardingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddAlternativeUserRole(ctx context.Context, in *AddAlternativeUserRoleRequest, opts ...grpc.CallOption) (*AddAlternativeUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAlternativeUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_AddAlternativeUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SwitchUserRole(ctx context.Context, in *SwitchUserRoleRequest, opts ...grpc.CallOption) (*SwitchUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_SwitchUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InviteRealtor(ctx context.Context, in *InviteRealtorRequest, opts ...grpc.CallOption) (*InviteRealtorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteRealtorResponse)
	err := c.cc.Invoke(ctx, UserService_InviteRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRealtorsByAgency(ctx context.Context, in *GetRealtorsByAgencyRequest, opts ...grpc.CallOption) (*GetRealtorsByAgencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealtorsByAgencyResponse)
	err := c.cc.Invoke(ctx, UserService_GetRealtorsByAgency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRealtorByID(ctx context.Context, in *GetRealtorByIDRequest, opts ...grpc.CallOption) (*GetRealtorByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealtorByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetRealtorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteRealtorByID(ctx context.Context, in *DeleteRealtorByIDRequest, opts ...grpc.CallOption) (*DeleteRealtorByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRealtorByIDResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteRealtorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, UserService_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RejectInvitation(ctx context.Context, in *RejectInvitationRequest, opts ...grpc.CallOption) (*RejectInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectInvitationResponse)
	err := c.cc.Invoke(ctx, UserService_RejectInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAgencyOfRealtor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAgencyOfRealtorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgencyOfRealtorResponse)
	err := c.cc.Invoke(ctx, UserService_GetAgencyOfRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAgencyOfRealtor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteAgencyOfRealtorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAgencyOfRealtorResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteAgencyOfRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GoHome(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GoHomeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoHomeResponse)
	err := c.cc.Invoke(ctx, UserService_GoHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOptStatus(ctx context.Context, in *UpdateOptStatusRequest, opts ...grpc.CallOption) (*UpdateOptStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOptStatusResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateOptStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateGCSUploadURL(ctx context.Context, in *GenerateGCSUploadURLRequest, opts ...grpc.CallOption) (*GenerateGCSUploadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateGCSUploadURLResponse)
	err := c.cc.Invoke(ctx, UserService_GenerateGCSUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// call without Authorization header
	CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerResponse, error)
	CreateRealtor(context.Context, *CreateRealtorRequest) (*CreateRealtorResponse, error)
	CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	RequestPasswordChange(context.Context, *RequestPasswordChangeRequest) (*RequestPasswordChangeResponse, error)
	ConfirmPasswordChange(context.Context, *ConfirmPasswordChangeRequest) (*ConfirmPasswordChangeResponse, error)
	// call with Authorization header for Owner, Realtor and Agency
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	RequestEmailChange(context.Context, *RequestEmailChangeRequest) (*RequestEmailChangeResponse, error)
	ConfirmEmailChange(context.Context, *ConfirmEmailChangeRequest) (*ConfirmEmailChangeResponse, error)
	RequestPhoneChange(context.Context, *RequestPhoneChangeRequest) (*RequestPhoneChangeResponse, error)
	ConfirmPhoneChange(context.Context, *ConfirmPhoneChangeRequest) (*ConfirmPhoneChangeResponse, error)
	VerifyCreciImages(context.Context, *VerifyCreciImagesRequest) (*VerifyCreciImagesResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	DeleteAccount(context.Context, *emptypb.Empty) (*DeleteAccountResponse, error)
	GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error)
	// call with Authorization header for Owner and Realtor only
	AddAlternativeUserRole(context.Context, *AddAlternativeUserRoleRequest) (*AddAlternativeUserRoleResponse, error)
	GetUserRoles(context.Context, *emptypb.Empty) (*GetUserRolesResponse, error)
	SwitchUserRole(context.Context, *SwitchUserRoleRequest) (*SwitchUserRoleResponse, error)
	// call with Authorization header for Agency only
	InviteRealtor(context.Context, *InviteRealtorRequest) (*InviteRealtorResponse, error)
	GetRealtorsByAgency(context.Context, *GetRealtorsByAgencyRequest) (*GetRealtorsByAgencyResponse, error)
	GetRealtorByID(context.Context, *GetRealtorByIDRequest) (*GetRealtorByIDResponse, error)
	DeleteRealtorByID(context.Context, *DeleteRealtorByIDRequest) (*DeleteRealtorByIDResponse, error)
	// call with Authorization header for Realtor only
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	RejectInvitation(context.Context, *RejectInvitationRequest) (*RejectInvitationResponse, error)
	GetAgencyOfRealtor(context.Context, *emptypb.Empty) (*GetAgencyOfRealtorResponse, error)
	DeleteAgencyOfRealtor(context.Context, *emptypb.Empty) (*DeleteAgencyOfRealtorResponse, error)
	GoHome(context.Context, *emptypb.Empty) (*GoHomeResponse, error)
	UpdateOptStatus(context.Context, *UpdateOptStatusRequest) (*UpdateOptStatusResponse, error)
	GenerateGCSUploadURL(context.Context, *GenerateGCSUploadURLRequest) (*GenerateGCSUploadURLResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedUserServiceServer) CreateRealtor(context.Context, *CreateRealtorRequest) (*CreateRealtorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealtor not implemented")
}
func (UnimplementedUserServiceServer) CreateAgency(context.Context, *CreateAgencyRequest) (*CreateAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgency not implemented")
}
func (UnimplementedUserServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUserServiceServer) RequestPasswordChange(context.Context, *RequestPasswordChangeRequest) (*RequestPasswordChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordChange not implemented")
}
func (UnimplementedUserServiceServer) ConfirmPasswordChange(context.Context, *ConfirmPasswordChangeRequest) (*ConfirmPasswordChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPasswordChange not implemented")
}
func (UnimplementedUserServiceServer) SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedUserServiceServer) RequestEmailChange(context.Context, *RequestEmailChangeRequest) (*RequestEmailChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEmailChange not implemented")
}
func (UnimplementedUserServiceServer) ConfirmEmailChange(context.Context, *ConfirmEmailChangeRequest) (*ConfirmEmailChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmailChange not implemented")
}
func (UnimplementedUserServiceServer) RequestPhoneChange(context.Context, *RequestPhoneChangeRequest) (*RequestPhoneChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPhoneChange not implemented")
}
func (UnimplementedUserServiceServer) ConfirmPhoneChange(context.Context, *ConfirmPhoneChangeRequest) (*ConfirmPhoneChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPhoneChange not implemented")
}
func (UnimplementedUserServiceServer) VerifyCreciImages(context.Context, *VerifyCreciImagesRequest) (*VerifyCreciImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCreciImages not implemented")
}
func (UnimplementedUserServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUserServiceServer) DeleteAccount(context.Context, *emptypb.Empty) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUserServiceServer) GetOnboardingStatus(context.Context, *GetOnboardingStatusRequest) (*GetOnboardingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingStatus not implemented")
}
func (UnimplementedUserServiceServer) AddAlternativeUserRole(context.Context, *AddAlternativeUserRoleRequest) (*AddAlternativeUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlternativeUserRole not implemented")
}
func (UnimplementedUserServiceServer) GetUserRoles(context.Context, *emptypb.Empty) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedUserServiceServer) SwitchUserRole(context.Context, *SwitchUserRoleRequest) (*SwitchUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchUserRole not implemented")
}
func (UnimplementedUserServiceServer) InviteRealtor(context.Context, *InviteRealtorRequest) (*InviteRealtorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteRealtor not implemented")
}
func (UnimplementedUserServiceServer) GetRealtorsByAgency(context.Context, *GetRealtorsByAgencyRequest) (*GetRealtorsByAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtorsByAgency not implemented")
}
func (UnimplementedUserServiceServer) GetRealtorByID(context.Context, *GetRealtorByIDRequest) (*GetRealtorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtorByID not implemented")
}
func (UnimplementedUserServiceServer) DeleteRealtorByID(context.Context, *DeleteRealtorByIDRequest) (*DeleteRealtorByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealtorByID not implemented")
}
func (UnimplementedUserServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedUserServiceServer) RejectInvitation(context.Context, *RejectInvitationRequest) (*RejectInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectInvitation not implemented")
}
func (UnimplementedUserServiceServer) GetAgencyOfRealtor(context.Context, *emptypb.Empty) (*GetAgencyOfRealtorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencyOfRealtor not implemented")
}
func (UnimplementedUserServiceServer) DeleteAgencyOfRealtor(context.Context, *emptypb.Empty) (*DeleteAgencyOfRealtorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgencyOfRealtor not implemented")
}
func (UnimplementedUserServiceServer) GoHome(context.Context, *emptypb.Empty) (*GoHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoHome not implemented")
}
func (UnimplementedUserServiceServer) UpdateOptStatus(context.Context, *UpdateOptStatusRequest) (*UpdateOptStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOptStatus not implemented")
}
func (UnimplementedUserServiceServer) GenerateGCSUploadURL(context.Context, *GenerateGCSUploadURLRequest) (*GenerateGCSUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateGCSUploadURL not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOwner(ctx, req.(*CreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateRealtor(ctx, req.(*CreateRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateAgency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAgency(ctx, req.(*CreateAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RequestPasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RequestPasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RequestPasswordChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RequestPasswordChange(ctx, req.(*RequestPasswordChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmPasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPasswordChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmPasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ConfirmPasswordChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmPasswordChange(ctx, req.(*ConfirmPasswordChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RequestEmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmailChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RequestEmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RequestEmailChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RequestEmailChange(ctx, req.(*RequestEmailChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmEmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmEmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ConfirmEmailChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmEmailChange(ctx, req.(*ConfirmEmailChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RequestPhoneChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPhoneChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RequestPhoneChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RequestPhoneChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RequestPhoneChange(ctx, req.(*RequestPhoneChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmPhoneChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPhoneChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmPhoneChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ConfirmPhoneChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmPhoneChange(ctx, req.(*ConfirmPhoneChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyCreciImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCreciImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyCreciImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyCreciImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyCreciImages(ctx, req.(*VerifyCreciImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOnboardingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOnboardingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOnboardingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOnboardingStatus(ctx, req.(*GetOnboardingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddAlternativeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlternativeUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddAlternativeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddAlternativeUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddAlternativeUserRole(ctx, req.(*AddAlternativeUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SwitchUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SwitchUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SwitchUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SwitchUserRole(ctx, req.(*SwitchUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InviteRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InviteRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_InviteRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InviteRealtor(ctx, req.(*InviteRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRealtorsByAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtorsByAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRealtorsByAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRealtorsByAgency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRealtorsByAgency(ctx, req.(*GetRealtorsByAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRealtorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRealtorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRealtorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRealtorByID(ctx, req.(*GetRealtorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteRealtorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRealtorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteRealtorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteRealtorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteRealtorByID(ctx, req.(*DeleteRealtorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RejectInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RejectInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RejectInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RejectInvitation(ctx, req.(*RejectInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAgencyOfRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAgencyOfRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAgencyOfRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAgencyOfRealtor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAgencyOfRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAgencyOfRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteAgencyOfRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAgencyOfRealtor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GoHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GoHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GoHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GoHome(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOptStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOptStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOptStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOptStatus(ctx, req.(*UpdateOptStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateGCSUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGCSUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateGCSUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GenerateGCSUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateGCSUploadURL(ctx, req.(*GenerateGCSUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _UserService_CreateOwner_Handler,
		},
		{
			MethodName: "CreateRealtor",
			Handler:    _UserService_CreateRealtor_Handler,
		},
		{
			MethodName: "CreateAgency",
			Handler:    _UserService_CreateAgency_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserService_RefreshToken_Handler,
		},
		{
			MethodName: "RequestPasswordChange",
			Handler:    _UserService_RequestPasswordChange_Handler,
		},
		{
			MethodName: "ConfirmPasswordChange",
			Handler:    _UserService_ConfirmPasswordChange_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _UserService_SignOut_Handler,
		},
		{
			MethodName: "RequestEmailChange",
			Handler:    _UserService_RequestEmailChange_Handler,
		},
		{
			MethodName: "ConfirmEmailChange",
			Handler:    _UserService_ConfirmEmailChange_Handler,
		},
		{
			MethodName: "RequestPhoneChange",
			Handler:    _UserService_RequestPhoneChange_Handler,
		},
		{
			MethodName: "ConfirmPhoneChange",
			Handler:    _UserService_ConfirmPhoneChange_Handler,
		},
		{
			MethodName: "VerifyCreciImages",
			Handler:    _UserService_VerifyCreciImages_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserService_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetOnboardingStatus",
			Handler:    _UserService_GetOnboardingStatus_Handler,
		},
		{
			MethodName: "AddAlternativeUserRole",
			Handler:    _UserService_AddAlternativeUserRole_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _UserService_GetUserRoles_Handler,
		},
		{
			MethodName: "SwitchUserRole",
			Handler:    _UserService_SwitchUserRole_Handler,
		},
		{
			MethodName: "InviteRealtor",
			Handler:    _UserService_InviteRealtor_Handler,
		},
		{
			MethodName: "GetRealtorsByAgency",
			Handler:    _UserService_GetRealtorsByAgency_Handler,
		},
		{
			MethodName: "GetRealtorByID",
			Handler:    _UserService_GetRealtorByID_Handler,
		},
		{
			MethodName: "DeleteRealtorByID",
			Handler:    _UserService_DeleteRealtorByID_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _UserService_AcceptInvitation_Handler,
		},
		{
			MethodName: "RejectInvitation",
			Handler:    _UserService_RejectInvitation_Handler,
		},
		{
			MethodName: "GetAgencyOfRealtor",
			Handler:    _UserService_GetAgencyOfRealtor_Handler,
		},
		{
			MethodName: "DeleteAgencyOfRealtor",
			Handler:    _UserService_DeleteAgencyOfRealtor_Handler,
		},
		{
			MethodName: "GoHome",
			Handler:    _UserService_GoHome_Handler,
		},
		{
			MethodName: "UpdateOptStatus",
			Handler:    _UserService_UpdateOptStatus_Handler,
		},
		{
			MethodName: "GenerateGCSUploadURL",
			Handler:    _UserService_GenerateGCSUploadURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
