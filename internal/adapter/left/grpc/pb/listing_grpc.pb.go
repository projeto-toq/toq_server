// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: listing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListingService_GetAllListings_FullMethodName        = "/grpc.ListingService/GetAllListings"
	ListingService_GetOptions_FullMethodName            = "/grpc.ListingService/GetOptions"
	ListingService_GetBaseFeatures_FullMethodName       = "/grpc.ListingService/GetBaseFeatures"
	ListingService_StartListing_FullMethodName          = "/grpc.ListingService/StartListing"
	ListingService_UpdateListing_FullMethodName         = "/grpc.ListingService/UpdateListing"
	ListingService_EndUpdateListing_FullMethodName      = "/grpc.ListingService/EndUpdateListing"
	ListingService_GetListingStatus_FullMethodName      = "/grpc.ListingService/GetListingStatus"
	ListingService_ApproveListing_FullMethodName        = "/grpc.ListingService/ApproveListing"
	ListingService_RejectListing_FullMethodName         = "/grpc.ListingService/RejectListing"
	ListingService_SuspendListing_FullMethodName        = "/grpc.ListingService/SuspendListing"
	ListingService_ReleaseListing_FullMethodName        = "/grpc.ListingService/ReleaseListing"
	ListingService_DeleteListing_FullMethodName         = "/grpc.ListingService/DeleteListing"
	ListingService_CopyListing_FullMethodName           = "/grpc.ListingService/CopyListing"
	ListingService_ApproveVisting_FullMethodName        = "/grpc.ListingService/ApproveVisting"
	ListingService_RejectVisting_FullMethodName         = "/grpc.ListingService/RejectVisting"
	ListingService_ApproveOffer_FullMethodName          = "/grpc.ListingService/ApproveOffer"
	ListingService_RejectOffer_FullMethodName           = "/grpc.ListingService/RejectOffer"
	ListingService_EvaluateRealtor_FullMethodName       = "/grpc.ListingService/EvaluateRealtor"
	ListingService_ShareListing_FullMethodName          = "/grpc.ListingService/ShareListing"
	ListingService_GetFavoriteListings_FullMethodName   = "/grpc.ListingService/GetFavoriteListings"
	ListingService_AddFavoriteListing_FullMethodName    = "/grpc.ListingService/AddFavoriteListing"
	ListingService_RemoveFavoriteListing_FullMethodName = "/grpc.ListingService/RemoveFavoriteListing"
	ListingService_RequestVisit_FullMethodName          = "/grpc.ListingService/RequestVisit"
	ListingService_CancelVisit_FullMethodName           = "/grpc.ListingService/CancelVisit"
	ListingService_ConfirmVisitDone_FullMethodName      = "/grpc.ListingService/ConfirmVisitDone"
	ListingService_EvaluateOwner_FullMethodName         = "/grpc.ListingService/EvaluateOwner"
	ListingService_CreateOffer_FullMethodName           = "/grpc.ListingService/CreateOffer"
	ListingService_UpdateOffer_FullMethodName           = "/grpc.ListingService/UpdateOffer"
	ListingService_SendOffer_FullMethodName             = "/grpc.ListingService/SendOffer"
	ListingService_CancelOffer_FullMethodName           = "/grpc.ListingService/CancelOffer"
	ListingService_SearchListing_FullMethodName         = "/grpc.ListingService/SearchListing"
	ListingService_GetListing_FullMethodName            = "/grpc.ListingService/GetListing"
	ListingService_GetAllVisits_FullMethodName          = "/grpc.ListingService/GetAllVisits"
	ListingService_GetVisits_FullMethodName             = "/grpc.ListingService/GetVisits"
	ListingService_GetAllOffers_FullMethodName          = "/grpc.ListingService/GetAllOffers"
	ListingService_GetOffers_FullMethodName             = "/grpc.ListingService/GetOffers"
)

// ListingServiceClient is the client API for ListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingServiceClient interface {
	// call from owner side
	GetAllListings(ctx context.Context, in *GetAllListingsRequest, opts ...grpc.CallOption) (*GetAllListingsResponse, error)
	GetOptions(ctx context.Context, in *GetOptionsRequest, opts ...grpc.CallOption) (*GetOptionsResponse, error)
	GetBaseFeatures(ctx context.Context, in *GetBaseFeaturesRequest, opts ...grpc.CallOption) (*GetBaseFeaturesResponse, error)
	StartListing(ctx context.Context, in *StartListingRequest, opts ...grpc.CallOption) (*StartListingResponse, error)
	UpdateListing(ctx context.Context, in *UpdateListingRequest, opts ...grpc.CallOption) (*UpdateListingResponse, error)
	EndUpdateListing(ctx context.Context, in *EndUpdateListingRequest, opts ...grpc.CallOption) (*EndUpdateListingResponse, error)
	GetListingStatus(ctx context.Context, in *GetListingStatusRequest, opts ...grpc.CallOption) (*GetListingStatusResponse, error)
	ApproveListing(ctx context.Context, in *ApproveListingRequest, opts ...grpc.CallOption) (*ApproveListingResponse, error)
	RejectListing(ctx context.Context, in *RejectListingRequest, opts ...grpc.CallOption) (*RejectListingResponse, error)
	SuspendListing(ctx context.Context, in *SuspendListingRequest, opts ...grpc.CallOption) (*SuspendListingResponse, error)
	ReleaseListing(ctx context.Context, in *ReleaseListingRequest, opts ...grpc.CallOption) (*ReleaseListingResponse, error)
	DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*DeleteListingResponse, error)
	CopyListing(ctx context.Context, in *CopyListingRequest, opts ...grpc.CallOption) (*CopyListingResponse, error)
	ApproveVisting(ctx context.Context, in *ApproveVistingRequest, opts ...grpc.CallOption) (*ApproveVistingResponse, error)
	RejectVisting(ctx context.Context, in *RejectVistingRequest, opts ...grpc.CallOption) (*RejectVistingResponse, error)
	ApproveOffer(ctx context.Context, in *ApproveOfferRequest, opts ...grpc.CallOption) (*ApproveOfferResponse, error)
	RejectOffer(ctx context.Context, in *RejectOfferRequest, opts ...grpc.CallOption) (*RejectOfferResponse, error)
	EvaluateRealtor(ctx context.Context, in *EvaluateRealtorRequest, opts ...grpc.CallOption) (*EvaluateRealtorResponse, error)
	// call from realtor side
	ShareListing(ctx context.Context, in *ShareListingRequest, opts ...grpc.CallOption) (*ShareListingResponse, error)
	GetFavoriteListings(ctx context.Context, in *GetFavoriteListingsRequest, opts ...grpc.CallOption) (*GetFavoriteListingsResponse, error)
	AddFavoriteListing(ctx context.Context, in *AddFavoriteListingRequest, opts ...grpc.CallOption) (*AddFavoriteListingResponse, error)
	RemoveFavoriteListing(ctx context.Context, in *RemoveFavoriteListingRequest, opts ...grpc.CallOption) (*RemoveFavoriteListingResponse, error)
	RequestVisit(ctx context.Context, in *RequestVisitRequest, opts ...grpc.CallOption) (*RequestVisitResponse, error)
	CancelVisit(ctx context.Context, in *CancelVisitRequest, opts ...grpc.CallOption) (*CancelVisitResponse, error)
	ConfirmVisitDone(ctx context.Context, in *ConfirmVisitDoneRequest, opts ...grpc.CallOption) (*ConfirmVisitDoneResponse, error)
	EvaluateOwner(ctx context.Context, in *EvaluateOwnerRequest, opts ...grpc.CallOption) (*EvaluateOwnerResponse, error)
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error)
	UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error)
	SendOffer(ctx context.Context, in *SendOfferRequest, opts ...grpc.CallOption) (*SendOfferResponse, error)
	CancelOffer(ctx context.Context, in *CancelOfferRequest, opts ...grpc.CallOption) (*CancelOfferResponse, error)
	// call from both sides
	SearchListing(ctx context.Context, in *SearchListingRequest, opts ...grpc.CallOption) (*SearchListingResponse, error)
	GetListing(ctx context.Context, in *GetListingRequest, opts ...grpc.CallOption) (*GetListingResponse, error)
	GetAllVisits(ctx context.Context, in *GetAllVisitsRequest, opts ...grpc.CallOption) (*GetAllVisitsResponse, error)
	GetVisits(ctx context.Context, in *GetVisitsRequest, opts ...grpc.CallOption) (*GetVisitsResponse, error)
	GetAllOffers(ctx context.Context, in *GetAllOffersRequest, opts ...grpc.CallOption) (*GetAllOffersResponse, error)
	GetOffers(ctx context.Context, in *GetOffersRequest, opts ...grpc.CallOption) (*GetOffersResponse, error)
}

type listingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingServiceClient(cc grpc.ClientConnInterface) ListingServiceClient {
	return &listingServiceClient{cc}
}

func (c *listingServiceClient) GetAllListings(ctx context.Context, in *GetAllListingsRequest, opts ...grpc.CallOption) (*GetAllListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllListingsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetAllListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetOptions(ctx context.Context, in *GetOptionsRequest, opts ...grpc.CallOption) (*GetOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptionsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetBaseFeatures(ctx context.Context, in *GetBaseFeaturesRequest, opts ...grpc.CallOption) (*GetBaseFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBaseFeaturesResponse)
	err := c.cc.Invoke(ctx, ListingService_GetBaseFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) StartListing(ctx context.Context, in *StartListingRequest, opts ...grpc.CallOption) (*StartListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartListingResponse)
	err := c.cc.Invoke(ctx, ListingService_StartListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) UpdateListing(ctx context.Context, in *UpdateListingRequest, opts ...grpc.CallOption) (*UpdateListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateListingResponse)
	err := c.cc.Invoke(ctx, ListingService_UpdateListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) EndUpdateListing(ctx context.Context, in *EndUpdateListingRequest, opts ...grpc.CallOption) (*EndUpdateListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndUpdateListingResponse)
	err := c.cc.Invoke(ctx, ListingService_EndUpdateListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetListingStatus(ctx context.Context, in *GetListingStatusRequest, opts ...grpc.CallOption) (*GetListingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListingStatusResponse)
	err := c.cc.Invoke(ctx, ListingService_GetListingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ApproveListing(ctx context.Context, in *ApproveListingRequest, opts ...grpc.CallOption) (*ApproveListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveListingResponse)
	err := c.cc.Invoke(ctx, ListingService_ApproveListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RejectListing(ctx context.Context, in *RejectListingRequest, opts ...grpc.CallOption) (*RejectListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectListingResponse)
	err := c.cc.Invoke(ctx, ListingService_RejectListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) SuspendListing(ctx context.Context, in *SuspendListingRequest, opts ...grpc.CallOption) (*SuspendListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspendListingResponse)
	err := c.cc.Invoke(ctx, ListingService_SuspendListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ReleaseListing(ctx context.Context, in *ReleaseListingRequest, opts ...grpc.CallOption) (*ReleaseListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseListingResponse)
	err := c.cc.Invoke(ctx, ListingService_ReleaseListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*DeleteListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteListingResponse)
	err := c.cc.Invoke(ctx, ListingService_DeleteListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) CopyListing(ctx context.Context, in *CopyListingRequest, opts ...grpc.CallOption) (*CopyListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyListingResponse)
	err := c.cc.Invoke(ctx, ListingService_CopyListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ApproveVisting(ctx context.Context, in *ApproveVistingRequest, opts ...grpc.CallOption) (*ApproveVistingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveVistingResponse)
	err := c.cc.Invoke(ctx, ListingService_ApproveVisting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RejectVisting(ctx context.Context, in *RejectVistingRequest, opts ...grpc.CallOption) (*RejectVistingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectVistingResponse)
	err := c.cc.Invoke(ctx, ListingService_RejectVisting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ApproveOffer(ctx context.Context, in *ApproveOfferRequest, opts ...grpc.CallOption) (*ApproveOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_ApproveOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RejectOffer(ctx context.Context, in *RejectOfferRequest, opts ...grpc.CallOption) (*RejectOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_RejectOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) EvaluateRealtor(ctx context.Context, in *EvaluateRealtorRequest, opts ...grpc.CallOption) (*EvaluateRealtorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateRealtorResponse)
	err := c.cc.Invoke(ctx, ListingService_EvaluateRealtor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ShareListing(ctx context.Context, in *ShareListingRequest, opts ...grpc.CallOption) (*ShareListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareListingResponse)
	err := c.cc.Invoke(ctx, ListingService_ShareListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetFavoriteListings(ctx context.Context, in *GetFavoriteListingsRequest, opts ...grpc.CallOption) (*GetFavoriteListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteListingsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetFavoriteListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) AddFavoriteListing(ctx context.Context, in *AddFavoriteListingRequest, opts ...grpc.CallOption) (*AddFavoriteListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFavoriteListingResponse)
	err := c.cc.Invoke(ctx, ListingService_AddFavoriteListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RemoveFavoriteListing(ctx context.Context, in *RemoveFavoriteListingRequest, opts ...grpc.CallOption) (*RemoveFavoriteListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFavoriteListingResponse)
	err := c.cc.Invoke(ctx, ListingService_RemoveFavoriteListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) RequestVisit(ctx context.Context, in *RequestVisitRequest, opts ...grpc.CallOption) (*RequestVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVisitResponse)
	err := c.cc.Invoke(ctx, ListingService_RequestVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) CancelVisit(ctx context.Context, in *CancelVisitRequest, opts ...grpc.CallOption) (*CancelVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelVisitResponse)
	err := c.cc.Invoke(ctx, ListingService_CancelVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) ConfirmVisitDone(ctx context.Context, in *ConfirmVisitDoneRequest, opts ...grpc.CallOption) (*ConfirmVisitDoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmVisitDoneResponse)
	err := c.cc.Invoke(ctx, ListingService_ConfirmVisitDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) EvaluateOwner(ctx context.Context, in *EvaluateOwnerRequest, opts ...grpc.CallOption) (*EvaluateOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateOwnerResponse)
	err := c.cc.Invoke(ctx, ListingService_EvaluateOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_CreateOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*UpdateOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_UpdateOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) SendOffer(ctx context.Context, in *SendOfferRequest, opts ...grpc.CallOption) (*SendOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_SendOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) CancelOffer(ctx context.Context, in *CancelOfferRequest, opts ...grpc.CallOption) (*CancelOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOfferResponse)
	err := c.cc.Invoke(ctx, ListingService_CancelOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) SearchListing(ctx context.Context, in *SearchListingRequest, opts ...grpc.CallOption) (*SearchListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchListingResponse)
	err := c.cc.Invoke(ctx, ListingService_SearchListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetListing(ctx context.Context, in *GetListingRequest, opts ...grpc.CallOption) (*GetListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListingResponse)
	err := c.cc.Invoke(ctx, ListingService_GetListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetAllVisits(ctx context.Context, in *GetAllVisitsRequest, opts ...grpc.CallOption) (*GetAllVisitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVisitsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetAllVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetVisits(ctx context.Context, in *GetVisitsRequest, opts ...grpc.CallOption) (*GetVisitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVisitsResponse)
	err := c.cc.Invoke(ctx, ListingService_GetVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetAllOffers(ctx context.Context, in *GetAllOffersRequest, opts ...grpc.CallOption) (*GetAllOffersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOffersResponse)
	err := c.cc.Invoke(ctx, ListingService_GetAllOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingServiceClient) GetOffers(ctx context.Context, in *GetOffersRequest, opts ...grpc.CallOption) (*GetOffersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOffersResponse)
	err := c.cc.Invoke(ctx, ListingService_GetOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingServiceServer is the server API for ListingService service.
// All implementations must embed UnimplementedListingServiceServer
// for forward compatibility.
type ListingServiceServer interface {
	// call from owner side
	GetAllListings(context.Context, *GetAllListingsRequest) (*GetAllListingsResponse, error)
	GetOptions(context.Context, *GetOptionsRequest) (*GetOptionsResponse, error)
	GetBaseFeatures(context.Context, *GetBaseFeaturesRequest) (*GetBaseFeaturesResponse, error)
	StartListing(context.Context, *StartListingRequest) (*StartListingResponse, error)
	UpdateListing(context.Context, *UpdateListingRequest) (*UpdateListingResponse, error)
	EndUpdateListing(context.Context, *EndUpdateListingRequest) (*EndUpdateListingResponse, error)
	GetListingStatus(context.Context, *GetListingStatusRequest) (*GetListingStatusResponse, error)
	ApproveListing(context.Context, *ApproveListingRequest) (*ApproveListingResponse, error)
	RejectListing(context.Context, *RejectListingRequest) (*RejectListingResponse, error)
	SuspendListing(context.Context, *SuspendListingRequest) (*SuspendListingResponse, error)
	ReleaseListing(context.Context, *ReleaseListingRequest) (*ReleaseListingResponse, error)
	DeleteListing(context.Context, *DeleteListingRequest) (*DeleteListingResponse, error)
	CopyListing(context.Context, *CopyListingRequest) (*CopyListingResponse, error)
	ApproveVisting(context.Context, *ApproveVistingRequest) (*ApproveVistingResponse, error)
	RejectVisting(context.Context, *RejectVistingRequest) (*RejectVistingResponse, error)
	ApproveOffer(context.Context, *ApproveOfferRequest) (*ApproveOfferResponse, error)
	RejectOffer(context.Context, *RejectOfferRequest) (*RejectOfferResponse, error)
	EvaluateRealtor(context.Context, *EvaluateRealtorRequest) (*EvaluateRealtorResponse, error)
	// call from realtor side
	ShareListing(context.Context, *ShareListingRequest) (*ShareListingResponse, error)
	GetFavoriteListings(context.Context, *GetFavoriteListingsRequest) (*GetFavoriteListingsResponse, error)
	AddFavoriteListing(context.Context, *AddFavoriteListingRequest) (*AddFavoriteListingResponse, error)
	RemoveFavoriteListing(context.Context, *RemoveFavoriteListingRequest) (*RemoveFavoriteListingResponse, error)
	RequestVisit(context.Context, *RequestVisitRequest) (*RequestVisitResponse, error)
	CancelVisit(context.Context, *CancelVisitRequest) (*CancelVisitResponse, error)
	ConfirmVisitDone(context.Context, *ConfirmVisitDoneRequest) (*ConfirmVisitDoneResponse, error)
	EvaluateOwner(context.Context, *EvaluateOwnerRequest) (*EvaluateOwnerResponse, error)
	CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error)
	UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error)
	SendOffer(context.Context, *SendOfferRequest) (*SendOfferResponse, error)
	CancelOffer(context.Context, *CancelOfferRequest) (*CancelOfferResponse, error)
	// call from both sides
	SearchListing(context.Context, *SearchListingRequest) (*SearchListingResponse, error)
	GetListing(context.Context, *GetListingRequest) (*GetListingResponse, error)
	GetAllVisits(context.Context, *GetAllVisitsRequest) (*GetAllVisitsResponse, error)
	GetVisits(context.Context, *GetVisitsRequest) (*GetVisitsResponse, error)
	GetAllOffers(context.Context, *GetAllOffersRequest) (*GetAllOffersResponse, error)
	GetOffers(context.Context, *GetOffersRequest) (*GetOffersResponse, error)
	mustEmbedUnimplementedListingServiceServer()
}

// UnimplementedListingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListingServiceServer struct{}

func (UnimplementedListingServiceServer) GetAllListings(context.Context, *GetAllListingsRequest) (*GetAllListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllListings not implemented")
}
func (UnimplementedListingServiceServer) GetOptions(context.Context, *GetOptionsRequest) (*GetOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedListingServiceServer) GetBaseFeatures(context.Context, *GetBaseFeaturesRequest) (*GetBaseFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseFeatures not implemented")
}
func (UnimplementedListingServiceServer) StartListing(context.Context, *StartListingRequest) (*StartListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartListing not implemented")
}
func (UnimplementedListingServiceServer) UpdateListing(context.Context, *UpdateListingRequest) (*UpdateListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListing not implemented")
}
func (UnimplementedListingServiceServer) EndUpdateListing(context.Context, *EndUpdateListingRequest) (*EndUpdateListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUpdateListing not implemented")
}
func (UnimplementedListingServiceServer) GetListingStatus(context.Context, *GetListingStatusRequest) (*GetListingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListingStatus not implemented")
}
func (UnimplementedListingServiceServer) ApproveListing(context.Context, *ApproveListingRequest) (*ApproveListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveListing not implemented")
}
func (UnimplementedListingServiceServer) RejectListing(context.Context, *RejectListingRequest) (*RejectListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectListing not implemented")
}
func (UnimplementedListingServiceServer) SuspendListing(context.Context, *SuspendListingRequest) (*SuspendListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendListing not implemented")
}
func (UnimplementedListingServiceServer) ReleaseListing(context.Context, *ReleaseListingRequest) (*ReleaseListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseListing not implemented")
}
func (UnimplementedListingServiceServer) DeleteListing(context.Context, *DeleteListingRequest) (*DeleteListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListing not implemented")
}
func (UnimplementedListingServiceServer) CopyListing(context.Context, *CopyListingRequest) (*CopyListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyListing not implemented")
}
func (UnimplementedListingServiceServer) ApproveVisting(context.Context, *ApproveVistingRequest) (*ApproveVistingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveVisting not implemented")
}
func (UnimplementedListingServiceServer) RejectVisting(context.Context, *RejectVistingRequest) (*RejectVistingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectVisting not implemented")
}
func (UnimplementedListingServiceServer) ApproveOffer(context.Context, *ApproveOfferRequest) (*ApproveOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOffer not implemented")
}
func (UnimplementedListingServiceServer) RejectOffer(context.Context, *RejectOfferRequest) (*RejectOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOffer not implemented")
}
func (UnimplementedListingServiceServer) EvaluateRealtor(context.Context, *EvaluateRealtorRequest) (*EvaluateRealtorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateRealtor not implemented")
}
func (UnimplementedListingServiceServer) ShareListing(context.Context, *ShareListingRequest) (*ShareListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareListing not implemented")
}
func (UnimplementedListingServiceServer) GetFavoriteListings(context.Context, *GetFavoriteListingsRequest) (*GetFavoriteListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteListings not implemented")
}
func (UnimplementedListingServiceServer) AddFavoriteListing(context.Context, *AddFavoriteListingRequest) (*AddFavoriteListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavoriteListing not implemented")
}
func (UnimplementedListingServiceServer) RemoveFavoriteListing(context.Context, *RemoveFavoriteListingRequest) (*RemoveFavoriteListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavoriteListing not implemented")
}
func (UnimplementedListingServiceServer) RequestVisit(context.Context, *RequestVisitRequest) (*RequestVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVisit not implemented")
}
func (UnimplementedListingServiceServer) CancelVisit(context.Context, *CancelVisitRequest) (*CancelVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelVisit not implemented")
}
func (UnimplementedListingServiceServer) ConfirmVisitDone(context.Context, *ConfirmVisitDoneRequest) (*ConfirmVisitDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmVisitDone not implemented")
}
func (UnimplementedListingServiceServer) EvaluateOwner(context.Context, *EvaluateOwnerRequest) (*EvaluateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateOwner not implemented")
}
func (UnimplementedListingServiceServer) CreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedListingServiceServer) UpdateOffer(context.Context, *UpdateOfferRequest) (*UpdateOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffer not implemented")
}
func (UnimplementedListingServiceServer) SendOffer(context.Context, *SendOfferRequest) (*SendOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffer not implemented")
}
func (UnimplementedListingServiceServer) CancelOffer(context.Context, *CancelOfferRequest) (*CancelOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOffer not implemented")
}
func (UnimplementedListingServiceServer) SearchListing(context.Context, *SearchListingRequest) (*SearchListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchListing not implemented")
}
func (UnimplementedListingServiceServer) GetListing(context.Context, *GetListingRequest) (*GetListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListing not implemented")
}
func (UnimplementedListingServiceServer) GetAllVisits(context.Context, *GetAllVisitsRequest) (*GetAllVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVisits not implemented")
}
func (UnimplementedListingServiceServer) GetVisits(context.Context, *GetVisitsRequest) (*GetVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisits not implemented")
}
func (UnimplementedListingServiceServer) GetAllOffers(context.Context, *GetAllOffersRequest) (*GetAllOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOffers not implemented")
}
func (UnimplementedListingServiceServer) GetOffers(context.Context, *GetOffersRequest) (*GetOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffers not implemented")
}
func (UnimplementedListingServiceServer) mustEmbedUnimplementedListingServiceServer() {}
func (UnimplementedListingServiceServer) testEmbeddedByValue()                        {}

// UnsafeListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingServiceServer will
// result in compilation errors.
type UnsafeListingServiceServer interface {
	mustEmbedUnimplementedListingServiceServer()
}

func RegisterListingServiceServer(s grpc.ServiceRegistrar, srv ListingServiceServer) {
	// If the following call pancis, it indicates UnimplementedListingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListingService_ServiceDesc, srv)
}

func _ListingService_GetAllListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetAllListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetAllListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetAllListings(ctx, req.(*GetAllListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetOptions(ctx, req.(*GetOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetBaseFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetBaseFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetBaseFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetBaseFeatures(ctx, req.(*GetBaseFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_StartListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).StartListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_StartListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).StartListing(ctx, req.(*StartListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_UpdateListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).UpdateListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_UpdateListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).UpdateListing(ctx, req.(*UpdateListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_EndUpdateListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndUpdateListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).EndUpdateListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_EndUpdateListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).EndUpdateListing(ctx, req.(*EndUpdateListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetListingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetListingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetListingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetListingStatus(ctx, req.(*GetListingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ApproveListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ApproveListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ApproveListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ApproveListing(ctx, req.(*ApproveListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RejectListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RejectListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RejectListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RejectListing(ctx, req.(*RejectListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_SuspendListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).SuspendListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_SuspendListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).SuspendListing(ctx, req.(*SuspendListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ReleaseListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ReleaseListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ReleaseListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ReleaseListing(ctx, req.(*ReleaseListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_DeleteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).DeleteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_DeleteListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).DeleteListing(ctx, req.(*DeleteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_CopyListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).CopyListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_CopyListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).CopyListing(ctx, req.(*CopyListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ApproveVisting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveVistingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ApproveVisting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ApproveVisting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ApproveVisting(ctx, req.(*ApproveVistingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RejectVisting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectVistingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RejectVisting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RejectVisting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RejectVisting(ctx, req.(*RejectVistingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ApproveOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ApproveOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ApproveOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ApproveOffer(ctx, req.(*ApproveOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RejectOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RejectOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RejectOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RejectOffer(ctx, req.(*RejectOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_EvaluateRealtor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRealtorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).EvaluateRealtor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_EvaluateRealtor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).EvaluateRealtor(ctx, req.(*EvaluateRealtorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ShareListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ShareListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ShareListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ShareListing(ctx, req.(*ShareListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetFavoriteListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetFavoriteListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetFavoriteListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetFavoriteListings(ctx, req.(*GetFavoriteListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_AddFavoriteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).AddFavoriteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_AddFavoriteListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).AddFavoriteListing(ctx, req.(*AddFavoriteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RemoveFavoriteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFavoriteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RemoveFavoriteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RemoveFavoriteListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RemoveFavoriteListing(ctx, req.(*RemoveFavoriteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_RequestVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).RequestVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_RequestVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).RequestVisit(ctx, req.(*RequestVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_CancelVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).CancelVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_CancelVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).CancelVisit(ctx, req.(*CancelVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_ConfirmVisitDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmVisitDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).ConfirmVisitDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_ConfirmVisitDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).ConfirmVisitDone(ctx, req.(*ConfirmVisitDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_EvaluateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).EvaluateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_EvaluateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).EvaluateOwner(ctx, req.(*EvaluateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_CreateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_UpdateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).UpdateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_UpdateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).UpdateOffer(ctx, req.(*UpdateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_SendOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).SendOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_SendOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).SendOffer(ctx, req.(*SendOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_CancelOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).CancelOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_CancelOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).CancelOffer(ctx, req.(*CancelOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_SearchListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).SearchListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_SearchListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).SearchListing(ctx, req.(*SearchListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetListing(ctx, req.(*GetListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetAllVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVisitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetAllVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetAllVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetAllVisits(ctx, req.(*GetAllVisitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetVisits(ctx, req.(*GetVisitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetAllOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetAllOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetAllOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetAllOffers(ctx, req.(*GetAllOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingService_GetOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingServiceServer).GetOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingService_GetOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingServiceServer).GetOffers(ctx, req.(*GetOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingService_ServiceDesc is the grpc.ServiceDesc for ListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ListingService",
	HandlerType: (*ListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllListings",
			Handler:    _ListingService_GetAllListings_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _ListingService_GetOptions_Handler,
		},
		{
			MethodName: "GetBaseFeatures",
			Handler:    _ListingService_GetBaseFeatures_Handler,
		},
		{
			MethodName: "StartListing",
			Handler:    _ListingService_StartListing_Handler,
		},
		{
			MethodName: "UpdateListing",
			Handler:    _ListingService_UpdateListing_Handler,
		},
		{
			MethodName: "EndUpdateListing",
			Handler:    _ListingService_EndUpdateListing_Handler,
		},
		{
			MethodName: "GetListingStatus",
			Handler:    _ListingService_GetListingStatus_Handler,
		},
		{
			MethodName: "ApproveListing",
			Handler:    _ListingService_ApproveListing_Handler,
		},
		{
			MethodName: "RejectListing",
			Handler:    _ListingService_RejectListing_Handler,
		},
		{
			MethodName: "SuspendListing",
			Handler:    _ListingService_SuspendListing_Handler,
		},
		{
			MethodName: "ReleaseListing",
			Handler:    _ListingService_ReleaseListing_Handler,
		},
		{
			MethodName: "DeleteListing",
			Handler:    _ListingService_DeleteListing_Handler,
		},
		{
			MethodName: "CopyListing",
			Handler:    _ListingService_CopyListing_Handler,
		},
		{
			MethodName: "ApproveVisting",
			Handler:    _ListingService_ApproveVisting_Handler,
		},
		{
			MethodName: "RejectVisting",
			Handler:    _ListingService_RejectVisting_Handler,
		},
		{
			MethodName: "ApproveOffer",
			Handler:    _ListingService_ApproveOffer_Handler,
		},
		{
			MethodName: "RejectOffer",
			Handler:    _ListingService_RejectOffer_Handler,
		},
		{
			MethodName: "EvaluateRealtor",
			Handler:    _ListingService_EvaluateRealtor_Handler,
		},
		{
			MethodName: "ShareListing",
			Handler:    _ListingService_ShareListing_Handler,
		},
		{
			MethodName: "GetFavoriteListings",
			Handler:    _ListingService_GetFavoriteListings_Handler,
		},
		{
			MethodName: "AddFavoriteListing",
			Handler:    _ListingService_AddFavoriteListing_Handler,
		},
		{
			MethodName: "RemoveFavoriteListing",
			Handler:    _ListingService_RemoveFavoriteListing_Handler,
		},
		{
			MethodName: "RequestVisit",
			Handler:    _ListingService_RequestVisit_Handler,
		},
		{
			MethodName: "CancelVisit",
			Handler:    _ListingService_CancelVisit_Handler,
		},
		{
			MethodName: "ConfirmVisitDone",
			Handler:    _ListingService_ConfirmVisitDone_Handler,
		},
		{
			MethodName: "EvaluateOwner",
			Handler:    _ListingService_EvaluateOwner_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _ListingService_CreateOffer_Handler,
		},
		{
			MethodName: "UpdateOffer",
			Handler:    _ListingService_UpdateOffer_Handler,
		},
		{
			MethodName: "SendOffer",
			Handler:    _ListingService_SendOffer_Handler,
		},
		{
			MethodName: "CancelOffer",
			Handler:    _ListingService_CancelOffer_Handler,
		},
		{
			MethodName: "SearchListing",
			Handler:    _ListingService_SearchListing_Handler,
		},
		{
			MethodName: "GetListing",
			Handler:    _ListingService_GetListing_Handler,
		},
		{
			MethodName: "GetAllVisits",
			Handler:    _ListingService_GetAllVisits_Handler,
		},
		{
			MethodName: "GetVisits",
			Handler:    _ListingService_GetVisits_Handler,
		},
		{
			MethodName: "GetAllOffers",
			Handler:    _ListingService_GetAllOffers_Handler,
		},
		{
			MethodName: "GetOffers",
			Handler:    _ListingService_GetOffers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listing.proto",
}
