syntax = "proto3";
package grpc;

import "google/protobuf/empty.proto";

// Use full module path so generated code is written to internal/adapter/left/grpc/pb
option go_package = "github.com/giulio-alfieri/toq_server/internal/adapter/left/grpc/pb";

service UserService {
    //call without Authorization header
    rpc CreateOwner (CreateOwnerRequest) returns (CreateOwnerResponse);
    rpc CreateRealtor (CreateRealtorRequest) returns (CreateRealtorResponse);
    rpc CreateAgency (CreateAgencyRequest) returns (CreateAgencyResponse);
    rpc SignIn (SignInRequest) returns (SignInResponse);
    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc RequestPasswordChange (RequestPasswordChangeRequest) returns (RequestPasswordChangeResponse);
    rpc ConfirmPasswordChange (ConfirmPasswordChangeRequest) returns (ConfirmPasswordChangeResponse);

    //call with Authorization header for Owner, Realtor and Agency
    rpc SignOut (SignOutRequest) returns (SignOutResponse);
    rpc RequestEmailChange (RequestEmailChangeRequest) returns (RequestEmailChangeResponse);
    rpc ConfirmEmailChange (ConfirmEmailChangeRequest) returns (ConfirmEmailChangeResponse);
    rpc RequestPhoneChange (RequestPhoneChangeRequest) returns (RequestPhoneChangeResponse);
    rpc ConfirmPhoneChange (ConfirmPhoneChangeRequest) returns (ConfirmPhoneChangeResponse);
    rpc VerifyCreciImages (VerifyCreciImagesRequest) returns (VerifyCreciImagesResponse);
    rpc GetProfile (GetProfileRequest) returns (GetProfileResponse);
    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse);
    rpc GetPhoto (GetPhotoRequest) returns (GetPhotoResponse);
    rpc UpdatePhoto (UpdatePhotoRequest) returns (UpdatePhotoResponse);
    rpc DeleteAccount (google.protobuf.Empty) returns (DeleteAccountResponse);
    rpc GetOnboardingStatus (GetOnboardingStatusRequest) returns (GetOnboardingStatusResponse);
    
    //call with Authorization header for Owner and Realtor only
    rpc AddAlternativeUserRole (AddAlternativeUserRoleRequest) returns (AddAlternativeUserRoleResponse);
    rpc GetUserRoles (google.protobuf.Empty) returns (GetUserRolesResponse);
    rpc SwitchUserRole (SwitchUserRoleRequest) returns (SwitchUserRoleResponse);

    //call with Authorization header for Agency only
    rpc InviteRealtor (InviteRealtorRequest) returns (InviteRealtorResponse);
    rpc GetRealtorsByAgency (GetRealtorsByAgencyRequest) returns (GetRealtorsByAgencyResponse);
    rpc GetRealtorByID (GetRealtorByIDRequest) returns (GetRealtorByIDResponse);
    rpc DeleteRealtorByID (DeleteRealtorByIDRequest) returns (DeleteRealtorByIDResponse);

    //call with Authorization header for Realtor only
    rpc AcceptInvitation (AcceptInvitationRequest) returns (AcceptInvitationResponse);
    rpc RejectInvitation (RejectInvitationRequest) returns (RejectInvitationResponse);
    rpc GetAgencyOfRealtor (google.protobuf.Empty) returns (GetAgencyOfRealtorResponse);
    rpc DeleteAgencyOfRealtor (google.protobuf.Empty) returns (DeleteAgencyOfRealtorResponse);

    rpc GoHome (google.protobuf.Empty) returns (GoHomeResponse);
    rpc UpdateOptStatus (UpdateOptStatusRequest) returns (UpdateOptStatusResponse);//novo rpc
}

//messages of CreateOwner
message CreateOwnerRequest {
    User owner = 1;
}

message CreateOwnerResponse {
    Tokens tokens = 1;
}

//messages of CreateRealtor
message CreateRealtorRequest {
    User realtor = 1;
}

message CreateRealtorResponse {
    Tokens tokens = 1;
}

//messages of CreateAgency
message CreateAgencyRequest {
    User agency = 1;
}

message CreateAgencyResponse {
    Tokens tokens = 1;
}

//messages of Signin
message SignInRequest {
    string nationalID = 1;
    string password = 2;
    string deviceToken = 3; // FCM device token sent on every login
}

message SignInResponse {
    Tokens tokens = 1;
}

//messages of RefreshToken
message RefreshTokenRequest {
    string refreshToken = 1;
}

message RefreshTokenResponse {
    Tokens tokens = 1;
}

//messages of SignOut
message SignOutRequest {
    // Optional: device token of the current session to be removed on sign out
    string deviceToken = 1;
    // Optional: refresh token of the session to revoke (single-device logout). If omitted => global logout.
    string refreshToken = 2;
}

message SignOutResponse {}

//messages of RequestEmailChange
message RequestEmailChangeRequest {
    string newEmail = 1;
}

message RequestEmailChangeResponse {
}

//messages of ConfirmEmailChange
message ConfirmEmailChangeRequest {
    string code = 1;
}

message ConfirmEmailChangeResponse {
    Tokens tokens = 1;
}

//messages of RequestPhoneChange
message RequestPhoneChangeRequest {
    string newPhoneNumber = 1;
}

message RequestPhoneChangeResponse {
}

//messages of ConfirmPhoneChange
message ConfirmPhoneChangeRequest {
    string code = 1;
}

message ConfirmPhoneChangeResponse {
    Tokens tokens = 1;
}

//messages of VerifyCreciImages
message VerifyCreciImagesRequest {
}

message VerifyCreciImagesResponse {
}

//messages of RequestPasswordChange
message RequestPasswordChangeRequest {
    string nationalID = 1;
}

message RequestPasswordChangeResponse {
}

//messages of ResetPassword
message ConfirmPasswordChangeRequest {
    string nationalID = 1;
    string newPassword = 2;
    string code = 3;
}

message ConfirmPasswordChangeResponse {
}

//messages of GetProfile
message GetProfileRequest {
}

message GetProfileResponse {
    User user = 1;
}

//messages of UpdateProfile
message UpdateProfileRequest {
    UpdateUser user = 1;
}

message UpdateProfileResponse {
}

//messages of GetPhoto
message GetPhotoRequest {
}

message GetPhotoResponse {
    bytes photo = 1;
}

//messages of UpdatePhoto
message UpdatePhotoRequest {
    bytes photo = 1;
}

message UpdatePhotoResponse {
}

//messages of DeleteAccount
message DeleteAccountResponse {
    Tokens tokens = 1;
}

//messages of GetOnboardingStatus
message GetOnboardingStatusRequest {
}

message GetOnboardingStatusResponse {
    string status = 1;
    string reason = 2;
}

message AddAlternativeUserRoleRequest {
    string creciNumber = 1;
    string creciState = 2;
    string creciValidity = 3;//format 2006-01-02 = jan 2, 2006
}

message AddAlternativeUserRoleResponse {
}

message GetUserRolesResponse {
    repeated UserRole roles = 1;
}

message SwitchUserRoleRequest {
    int64 roleID = 1;
}

message SwitchUserRoleResponse {
    Tokens tokens = 1;
}

//messages of InviteRealtor
message InviteRealtorRequest {
    string phoneNumber = 1;
}

message InviteRealtorResponse {
}

//messages of GetRealtorsByAgency
message GetRealtorsByAgencyRequest {
}

message GetRealtorsByAgencyResponse {
    repeated User realtors = 1;
}

//messages of GetRealtorByID
message GetRealtorByIDRequest {
    int64 realtorID = 1;
}

message GetRealtorByIDResponse {
    User realtor = 1;
}

//messages of DeleteRealtorByID
message DeleteRealtorByIDRequest {
    int64 realtorID = 1;
}

message DeleteRealtorByIDResponse {
}

//messages of AcceptInvitation
message AcceptInvitationRequest {
}

message AcceptInvitationResponse {
}

//messages of RejectInvitation
message RejectInvitationRequest {
}

message RejectInvitationResponse { 
}

//messages of GetAgencyOfRealtor
message GetAgencyOfRealtorResponse {
    User agency = 1;
}

//messages of DeleteAgencyOfRealtor
message DeleteAgencyOfRealtorResponse {
}

//messages of PushOptIn
message PushOptInRequest {
}

message PushOptInResponse {
}

//messages of UpdateOptStatus
message UpdateOptStatusRequest {
    bool optIn = 1; // true for opt-in, false for opt-out
}

message UpdateOptStatusResponse {
}

//messages of GoHome
message GoHomeResponse {
    string message = 1;
}

//common messages
message User {
    int64 id = 1;
    UserRole activeRole = 2;
    string fullName = 3;
    string nickName = 4;
    string nationalID = 5;
    string creciNumber = 6;
    string creciState = 7;
    string creciValidity = 8;//format 2006-01-02 = jan 2, 2006
    string bornAT = 9;//format 2006-01-02 = jan 2, 2006
    string phoneNumber = 10;
    string email = 11;
    string zipCode = 12;
    string street = 13;
    string number = 14;
    string complement = 15;
    string neighborhood = 16;
    string city = 17;
    string state = 18;
    string password = 19;
    string last_activity = 20;//format 2006-01-02T15:04:05Z = jan 2, 2006 at 15:04:05
}

message UpdateUser {
    string nickName = 1;
    string bornAT = 2; // format 2006-01-02 = jan 2, 2006
    string zipCode = 3;
    string street = 4;
    string number = 5;
    string complement = 6;
    string neighborhood = 7;
    string city = 8;
    string state = 9;
}

message Tokens {
    string accessToken = 1;
    string refreshToken = 2;
}

message UserRole {
    int64 id = 1;
    int64 user_id = 2;
    int64 base_role_id = 3;
    string role = 4;
    bool active = 5;
    string status = 6;
    string status_reason = 7;
}
