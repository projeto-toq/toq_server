package config

import (
	"fmt"

	globalmodel "github.com/giulio-alfieri/toq_server/internal/core/model/global_model"
)

// Phase02_LoadConfiguration carrega e valida toda a configura√ß√£o do sistema
// Esta fase configura:
// - Carregamento de vari√°veis de ambiente
// - Carregamento de configura√ß√£o YAML
// - Valida√ß√£o de configura√ß√£o
// - Inicializa√ß√£o do sistema de logging
func (b *Bootstrap) Phase02_LoadConfiguration() error {
	b.logger.Info("üéØ FASE 2: Carregamento e Valida√ß√£o de Configura√ß√£o")
	b.logger.Debug("Carregando configura√ß√£o do sistema")

	// 1. Carregar vari√°veis de ambiente
	if err := b.loadEnvironmentConfig(); err != nil {
		return NewBootstrapError("Phase02", "env_load", "Failed to load environment configuration", err)
	}

	// 2. Inicializar sistema de logging (primeira vez com env)
	if err := b.initializeEarlyLogging(); err != nil {
		return NewBootstrapError("Phase02", "early_logging", "Failed to initialize early logging", err)
	}

	// 3. Reconfigurar logging com YAML (ENV ainda tem prioridade)
	if err := b.reconfigureLoggingWithYAML(); err != nil {
		return NewBootstrapError("Phase02", "yaml_logging", "Failed to reconfigure logging with YAML", err)
	}

	// 4. Validar configura√ß√£o completa
	if err := b.validateConfiguration(); err != nil {
		return NewBootstrapError("Phase02", "validation", "Configuration validation failed", err)
	}

	b.logger.Info("‚úÖ Configura√ß√£o carregada e validada com sucesso",
		"version", globalmodel.AppVersion)

	return nil
}

// loadEnvironmentConfig carrega as vari√°veis de ambiente
func (b *Bootstrap) loadEnvironmentConfig() error {
	b.logger.Debug("Carregando vari√°veis de ambiente")

	if err := b.config.LoadEnv(); err != nil {
		return fmt.Errorf("failed to load environment: %w", err)
	}

	// Armazenar refer√™ncia para uso posterior
	env := &globalmodel.Environment{}
	// Nota: Em implementa√ß√£o real, obter o env do config
	b.env = env

	b.logger.Debug("‚úÖ Vari√°veis de ambiente carregadas")
	return nil
}

// initializeEarlyLogging inicializa o logging baseado apenas em vari√°veis de ambiente
func (b *Bootstrap) initializeEarlyLogging() error {
	b.logger.Debug("Inicializando logging baseado em vari√°veis de ambiente")

	// Inicializar logging com configura√ß√£o de ambiente
	b.config.InitializeLog()

	b.logger.Info("‚úÖ Logging inicial baseado em ENV configurado")
	return nil
}

// reconfigureLoggingWithYAML reconfigura o logging com valores do YAML
func (b *Bootstrap) reconfigureLoggingWithYAML() error {
	b.logger.Debug("Reconfigurando logging com valores YAML")

	// Re-inicializar logging com configura√ß√£o completa (ENV > YAML > defaults)
	b.config.InitializeLog()

	b.logger.Info("‚úÖ Logging reconfigurado com prioridade ENV > YAML > defaults")
	return nil
}

// validateConfiguration valida toda a configura√ß√£o carregada
func (b *Bootstrap) validateConfiguration() error {
	b.logger.Debug("Validando configura√ß√£o completa")

	// Validar configura√ß√µes cr√≠ticas
	validations := []struct {
		name string
		fn   func() error
	}{
		{"database_config", b.validateDatabaseConfig},
		{"http_config", b.validateHTTPConfig},
		{"logging_config", b.validateLoggingConfig},
		{"telemetry_config", b.validateTelemetryConfig},
	}

	var validationErrors []error

	for _, validation := range validations {
		if err := validation.fn(); err != nil {
			b.logger.Warn("Valida√ß√£o falhou",
				"validation", validation.name,
				"error", err)
			validationErrors = append(validationErrors, fmt.Errorf("%s: %w", validation.name, err))
		}
	}

	if len(validationErrors) > 0 {
		return fmt.Errorf("configuration validation failed with %d errors: %v", len(validationErrors), validationErrors)
	}

	b.logger.Debug("‚úÖ Valida√ß√£o de configura√ß√£o conclu√≠da")
	return nil
}

// validateDatabaseConfig valida configura√ß√£o do banco de dados
func (b *Bootstrap) validateDatabaseConfig() error {
	// Nota: Implementa√ß√£o real validaria URI, conex√µes, etc.
	b.logger.Debug("Validando configura√ß√£o do banco de dados")
	return nil
}

// validateHTTPConfig valida configura√ß√£o HTTP
func (b *Bootstrap) validateHTTPConfig() error {
	// Nota: Implementa√ß√£o real validaria portas, TLS, etc.
	b.logger.Debug("Validando configura√ß√£o HTTP")
	return nil
}

// validateLoggingConfig valida configura√ß√£o de logging
func (b *Bootstrap) validateLoggingConfig() error {
	// Nota: Implementa√ß√£o real validaria caminhos, n√≠veis, etc.
	b.logger.Debug("Validando configura√ß√£o de logging")
	return nil
}

// validateTelemetryConfig valida configura√ß√£o de telemetria
func (b *Bootstrap) validateTelemetryConfig() error {
	// Nota: Implementa√ß√£o real validaria endpoints, chaves, etc.
	b.logger.Debug("Validando configura√ß√£o de telemetria")
	return nil
}

// Phase02Rollback executa rollback da Fase 2
func (b *Bootstrap) Phase02Rollback() error {
	b.logger.Info("üîÑ Executando rollback da Fase 2")

	// N√£o h√° muito para fazer rollback nesta fase
	// As configura√ß√µes s√£o apenas carregadas, n√£o criam recursos

	b.logger.Info("‚úÖ Rollback da Fase 2 conclu√≠do")
	return nil
}
