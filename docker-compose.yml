services:

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=toq_db
      - MYSQL_USER=toq_user
      - MYSQL_PASSWORD=toq_password
    ports:
      - "3306:3306"
    volumes:
      - /codigos/mysql_data:/var/lib/mysql
      - ./data:/var/lib/mysql-files
      - ./scripts/grant_privileges.sql:/docker-entrypoint-initdb.d/grant_privileges.sql
    networks:
      - toq-network

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - toq-network

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - toq-network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboard-files:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - toq-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver (usado pela aplicação)
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
    networks:
      - toq-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger HTTP collector
      - "6831:6831/udp" # Jaeger agent
      - "14317:4317" # OTLP gRPC receiver (diferente porta externa)
      - "14318:4318" # OTLP HTTP receiver (diferente porta externa)
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - toq-network

  # Swagger UI for API documentation
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8081:8080"
    environment:
      - SWAGGER_JSON_URL=http://host.docker.internal:8080/swagger/doc.json
    networks:
      - toq-network
    # Remove depends_on toq-server since it runs on host

networks:
  toq-network:
    driver: bridge

  swagger-ui:
    driver: bridge

volumes:
  grafana_data:
